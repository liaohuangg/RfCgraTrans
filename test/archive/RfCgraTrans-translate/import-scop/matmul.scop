// RUN: RfCgraTrans-translate %s -import-scop | FileCheck %s

// Matrix multiplication with constant lower/upper bounds.

<OpenScop>

# =============================================== Global
# Language
C

# Context
CONTEXT
0 2 0 0 0 0

# Parameters are not provided
0


# Number of statements
1

# =============================================== Statement 1
# Number of relations describing the statement:
6

# ----------------------------------------------  1.1 Domain
DOMAIN
6 5 3 0 0 0
# e/i| i0   i1   i2 |  1  
   1    1    0    0    0    ## i0 >= 0
   1   -1    0    0   63    ## -i0+63 >= 0
   1    0    1    0    0    ## i1 >= 0
   1    0   -1    0   63    ## -i1+63 >= 0
   1    0    0    1    0    ## i2 >= 0
   1    0    0   -1   63    ## -i2+63 >= 0

# ----------------------------------------------  1.2 Scattering
SCATTERING
7 12 7 3 0 0
# e/i| c1   c2   c3   c4   c5   c6   c7 | i0   i1   i2 |  1  
   0   -1    0    0    0    0    0    0    0    0    0    0    ## c1 == 0
   0    0   -1    0    0    0    0    0    1    0    0    0    ## c2 == i0
   0    0    0   -1    0    0    0    0    0    0    0    0    ## c3 == 0
   0    0    0    0   -1    0    0    0    0    1    0    0    ## c4 == i1
   0    0    0    0    0   -1    0    0    0    0    0    0    ## c5 == 0
   0    0    0    0    0    0   -1    0    0    0    1    0    ## c6 == i2
   0    0    0    0    0    0    0   -1    0    0    0    0    ## c7 == 0

# ----------------------------------------------  1.3 Access
WRITE
3 8 3 3 0 0
# e/i| Arr  [1]  [2]| i0   i1   i2 |  1  
   0   -1    0    0    0    0    0    1    ## Arr == A1
   0    0   -1    0    1    0    0    0    ## [1] == i0
   0    0    0   -1    0    1    0    0    ## [2] == i1

READ
3 8 3 3 0 0
# e/i| Arr  [1]  [2]| i0   i1   i2 |  1  
   0   -1    0    0    0    0    0    2    ## Arr == A2
   0    0   -1    0    1    0    0    0    ## [1] == i0
   0    0    0   -1    0    0    1    0    ## [2] == i2

READ
3 8 3 3 0 0
# e/i| Arr  [1]  [2]| i0   i1   i2 |  1  
   0   -1    0    0    0    0    0    3    ## Arr == A3
   0    0   -1    0    0    0    1    0    ## [1] == i2
   0    0    0   -1    0    1    0    0    ## [2] == i1

READ
3 8 3 3 0 0
# e/i| Arr  [1]  [2]| i0   i1   i2 |  1  
   0   -1    0    0    0    0    0    1    ## Arr == A1
   0    0   -1    0    1    0    0    0    ## [1] == i0
   0    0    0   -1    0    1    0    0    ## [2] == i1

# ----------------------------------------------  1.4 Statement Extensions
# Number of Statement Extensions
1
<body>
# Number of original iterators
3
# List of original iterators
i0 i1 i2
# Statement body expression
S0(A1, 2, A2, 2, A3, 2, A1, 2, i0, i1, i2)
</body>

# =============================================== Extensions
<arrays>
# Number of arrays
3
# Mapping array-identifiers/array-names
2 A2
3 A3
1 A1
</arrays>

<scatnames>
c0 i0 c2 i1 c4 i2 c6
</scatnames>

</OpenScop>


// CHECK:      func @main(%[[ARG0:.*]]: memref<?x?xf32>, %[[ARG1:.*]]: memref<?x?xf32>, %[[ARG2:.*]]: memref<?x?xf32>) {
// CHECK-NEXT:   affine.for %[[ARG3:.*]] = 0 to 64 {
// CHECK-NEXT:     affine.for %[[ARG4:.*]] = 0 to 64 {
// CHECK-NEXT:       affine.for %[[ARG5:.*]] = 0 to 64 {
// CHECK-NEXT:         call @S0(%[[ARG0]], %[[ARG1]], %[[ARG2]], %[[ARG0]], %[[ARG3]], %[[ARG4]], %[[ARG5]]) : (memref<?x?xf32>, memref<?x?xf32>, memref<?x?xf32>, memref<?x?xf32>, index, index, index) -> ()
// CHECK-NEXT:       }
// CHECK-NEXT:     }
// CHECK-NEXT:   }
// CHECK-NEXT:   return
// CHECK-NEXT: }
//
// CHECK:      func private @S0(memref<?x?xf32>, memref<?x?xf32>, memref<?x?xf32>, memref<?x?xf32>, index, index, index)
