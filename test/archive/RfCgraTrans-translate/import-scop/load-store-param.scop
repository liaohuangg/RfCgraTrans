// RUN: RfCgraTrans-translate %s -import-scop | FileCheck %s

// A simple test case that uses parameter as the upper bound.

<OpenScop>

# =============================================== Global
# Language
C

# Context
CONTEXT
1 3 0 0 0 1
# e/i| P0 |  1  
   1    1   -1    ## P0-1 >= 0

# Parameters are provided
1
<strings>
P0
</strings>

# Number of statements
1

# =============================================== Statement 1
# Number of relations describing the statement:
4

# ----------------------------------------------  1.1 Domain
DOMAIN
2 4 1 0 0 1
# e/i| i0 | P0 |  1  
   1    1    0    0    ## i0 >= 0
   1   -1    1   -1    ## -i0+P0-1 >= 0

# ----------------------------------------------  1.2 Scattering
SCATTERING
3 7 3 1 0 1
# e/i| c1   c2   c3 | i0 | P0 |  1  
   0   -1    0    0    0    0    0    ## c1 == 0
   0    0   -1    0    1    0    0    ## c2 == i0
   0    0    0   -1    0    0    0    ## c3 == 0

# ----------------------------------------------  1.3 Access
WRITE
2 6 2 1 0 1
# e/i| Arr  [1]| i0 | P0 |  1  
   0   -1    0    0    0    1    ## Arr == A1
   0    0   -1    1    0    0    ## [1] == i0

READ
2 6 2 1 0 1
# e/i| Arr  [1]| i0 | P0 |  1  
   0   -1    0    0    0    1    ## Arr == A1
   0    0   -1   -1    1   -1    ## [1] == -i0+P0-1

# ----------------------------------------------  1.4 Statement Extensions
# Number of Statement Extensions
1
<body>
# Number of original iterators
1
# List of original iterators
i0
# Statement body expression
S0(A1, 1, A1, 1, i0)
</body>

# =============================================== Extensions
<arrays>
# Number of arrays
1
# Mapping array-identifiers/array-names
1 A1
</arrays>

<scatnames>
c0 i0 c2
</scatnames>

</OpenScop>

// CHECK:      func @main(%[[ARG0:.*]]: index, %[[ARG1:.*]]: memref<?xf32>) {
// CHECK-NEXT:   affine.for %[[ARG2:.*]] = 0 to %[[ARG0]] {
// CHECK-NEXT:     call @S0(%[[ARG1]], %[[ARG1]], %[[ARG2]]) : (memref<?xf32>, memref<?xf32>, index) -> ()
// CHECK-NEXT:   }
// CHECK-NEXT:   return
// CHECK-NEXT: }
//
// CHECK: func private @S0(memref<?xf32>, memref<?xf32>, index)
