// RUN: RfCgraTrans-translate %s -import-scop | FileCheck %s

// A simple transpose application.

<OpenScop>

# =============================================== Global
# Language
C

# Context
CONTEXT
2 4 0 0 0 2
# e/i| P0   P1 |  1  
   1    1    0   -1    ## P0-1 >= 0
   1    0    1   -1    ## P1-1 >= 0

# Parameters are provided
1
<strings>
P0 P1
</strings>

# Number of statements
1

# =============================================== Statement 1
# Number of relations describing the statement:
4

# ----------------------------------------------  1.1 Domain
DOMAIN
4 6 2 0 0 2
# e/i| i0   i1 | P0   P1 |  1  
   1    1    0    0    0    0    ## i0 >= 0
   1   -1    0    1    0   -1    ## -i0+P0-1 >= 0
   1    0    1    0    0    0    ## i1 >= 0
   1    0   -1    0    1   -1    ## -i1+P1-1 >= 0

# ----------------------------------------------  1.2 Scattering
SCATTERING
5 11 5 2 0 2
# e/i| c1   c2   c3   c4   c5 | i0   i1 | P0   P1 |  1  
   0   -1    0    0    0    0    0    0    0    0    0    ## c1 == 0
   0    0   -1    0    0    0    1    0    0    0    0    ## c2 == i0
   0    0    0   -1    0    0    0    0    0    0    0    ## c3 == 0
   0    0    0    0   -1    0    0    1    0    0    0    ## c4 == i1
   0    0    0    0    0   -1    0    0    0    0    0    ## c5 == 0

# ----------------------------------------------  1.3 Access
WRITE
3 9 3 2 0 2
# e/i| Arr  [1]  [2]| i0   i1 | P0   P1 |  1  
   0   -1    0    0    0    0    0    0    1    ## Arr == A1
   0    0   -1    0    1    0    0    0    0    ## [1] == i0
   0    0    0   -1    0    1    0    0    0    ## [2] == i1

READ
3 9 3 2 0 2
# e/i| Arr  [1]  [2]| i0   i1 | P0   P1 |  1  
   0   -1    0    0    0    0    0    0    1    ## Arr == A1
   0    0   -1    0    1    0    0    0    0    ## [1] == i0
   0    0    0   -1    0    1    0    0    0    ## [2] == i1

# ----------------------------------------------  1.4 Statement Extensions
# Number of Statement Extensions
1
<body>
# Number of original iterators
2
# List of original iterators
i0 i1
# Statement body expression
S0(A1, 2, A1, 2, i0, i1)
</body>

# =============================================== Extensions
<arrays>
# Number of arrays
1
# Mapping array-identifiers/array-names
1 A1
</arrays>

<scatnames>
c0 i0 c2 i1 c4
</scatnames>

</OpenScop>


// CHECK:      func @main(%[[ARG0:.*]]: index, %[[ARG1:.*]]: index, %[[ARG2:.*]]: memref<?x?xf32>) {
// CHECK-NEXT:   affine.for %[[ARG3:.*]] = 0 to %[[ARG0]] {
// CHECK-NEXT:     affine.for %[[ARG4:.*]] = 0 to %[[ARG1]] {
// CHECK-NEXT:       call @S0(%[[ARG2]], %[[ARG2]], %[[ARG3]], %[[ARG4]]) : (memref<?x?xf32>, memref<?x?xf32>, index, index) -> ()
// CHECK-NEXT:     }
// CHECK-NEXT:   }
// CHECK-NEXT:   return
// CHECK-NEXT: }
//
// CHECK:      func private @S0(memref<?x?xf32>, memref<?x?xf32>, index, index)
