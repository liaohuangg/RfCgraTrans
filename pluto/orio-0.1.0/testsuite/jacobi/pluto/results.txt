=================
 Jacobi 1-D
=================

Code:

for (t=1; t<=T-1; t++) 
  for (i=1; i<=N-2; i++) 
    a[t][i] = 0.333 * (a[t-1][i-1] + a[t-1][i] + a[t-1][i+1]);

Total number of operations = 3*(T-1)*(N-2)

*********************
Sequential version
*********************
T = 100
-------------------------------------------------------------------------------------------
 N       icc -fast -parallel      pluto       pluto+orio
-------------------------------------------------------------------------------------------
seconds:
  500k  0.277445   0.207297   0.201840
 1000k  0.549079   0.403632   0.406202
 1500k  0.826821   0.616596   0.600731
 2000k  1.097579   0.816334   0.805015
 2500k  1.384712   1.031548   1.007069
gflops:
  500k 
 1000k 
 1500k 
 2000k 
 2500k 


*********************
Parallel version
*********************
T = 100
N = 2500k
-------------------------------------------------------------------------------------------
 #cores  icc -fast -parallel       pluto      pluto+orio
-------------------------------------------------------------------------------------------
seconds:
 1   1.383581   1.036449  1.008421
 2   1.176110   1.009532  0.849292
 3   1.218276   0.999858  0.861535
 4   1.207520   1.008300  0.854356
gflops:
 1 
 2 
 3 
 4 

 IVEC = True
 PAR = True
 PERM = [0, 1]
 SCREP = False
 T1_1 = 32
 T1_2 = 128
 T2_1 = 1
 T2_2 = 8
 U1 = 2
 U2 = 8
